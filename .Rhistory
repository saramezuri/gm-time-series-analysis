type = "o", xlab = "Date", ylab = "Shorten Monthly Sales", main = "Ford Motor Shorten Time Series")
plot(Date_Short, gm_ts,
type = "o", xlab = "Date", ylab = "Shorten Monthly Sales", main = "General Motors Shorten Time Series")
# Read in the data
setwd("C:/Users/saram/Desktop/OU/Winter 2023/STA 5330 (Time series I)/Project")
mydata <- read.csv("SALES DATA.csv")
#Convert the data
mydata$Date<-as.Date(mydata$Date, format="%m/%d/%Y")
# Print the first 6 rows of the data frame
head(mydata)
# Print the last 6 rows of the data frame
tail(mydata)
# Check the structure of the data
str(mydata)
# Read in the data
setwd("C:/Users/saram/Desktop/OU/Winter 2023/STA 5330 (Time series I)/Project")
mydata <- read.csv("SALES DATA.csv")
#Convert the data
mydata$Date<-as.Date(mydata$Date, format="%m/%d/%Y")
# Print the first 6 rows of the data frame
head(mydata)
# Print the last 6 rows of the data frame
tail(mydata)
# Check the structure of the data
str(mydata)
# Check the summary of the data
summary(mydata)
str(mydata)
# Read in the data
setwd("C:/Users/saram/Desktop/OU/Winter 2023/STA 5330 (Time series I)/Project")
mydata <- read.csv("SALES DATA.csv")
#Convert the data
mydata$Date<-as.Date(mydata$Date, format="%m/%d/%Y")
# Print the first 6 rows of the data frame
head(mydata)
# Print the last 6 rows of the data frame
tail(mydata)
# Check the structure of the data
str(mydata)
# Check the summary of the data
summary(mydata)
# Length of the GM Sales Data column
n <- length(mydata$GM)
print(n)
# Create the data without the last 24 months
GM_Short <- mydata$GM[1:(n-24)]
head(GM_Short)
tail(GM_Short)
str(GM_Short)
Date_Short <- mydata$Date[1:(n-24)]
head(Date_Short)
tail(Date_Short)
str(Date_Short)
# Create the data containing only the last 24 months
GM_Predict <- mydata$GM[(n-23):n]
head(GM_Predict)
tail(GM_Predict)
str(GM_Predict)
Date_Predict <- mydata$Date[(n-23):n]
head(Date_Predict)
tail(Date_Predict)
str(Date_Predict)
# Create the sales plot
gm <- ts(mydata$GM) # create a time series object for GM Monthly Sales
plot(mydata$Date, gm,
type = "o", xlab = "Date", ylab = "Monthly Sales", main = "Original General Motors Time Series")
# Create the sales plot
gm <- ts(mydata$GM) # create a time series object for GM Monthly Sales
plot(mydata$Date, gm,
type = "o", xlab = "Date", ylab = "Monthly Sales", main = "Original General Motors Time Series")
# Create the sales plot
gm <- ts(mydata$GM) # create a time series object for GM Monthly Sales
plot(mydata$Date, gm,
type = "o", xlab = "Date", ylab = "Monthly Sales", main = "Original General Motors Time Series")
# Create the plot containing data from January 2005 to December 2020
gm_ts <- ts(GM_Short) # create a time series object for GM Shorten Monthly Sales
plot(Date_Short, gm_ts,
type = "o", xlab = "Date", ylab = "Shorten Monthly Sales", main = "General Motors Shorten Time Series")
library(tseries)
# Perform the Augmented Dickey-Fuller test
test <- adf.test(gm_ts)
# Print results
print(test)
cat("p-value: ", test$p.value, "\n")
# Create the plot containing data from January 2005 to December 2020
gm_ts <- ts(GM_Short) # create a time series object for GM Shorten Monthly Sales
plot(Date_Short, gm_ts,
type = "o", xlab = "Date", ylab = "Shorten Monthly Sales", main = "General Motors Shorten Time Series")
library(tseries)
# Perform the Augmented Dickey-Fuller test
test <- adf.test(gm_ts)
# Print results
print(test)
cat("p-value: ", test$p.value, "\n")
# Plot the acf and pacf of GM
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Plot the acf and pacf of GM
par(c(2,1))
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Plot the acf and pacf of GM
par(mfrow = c(2,1))
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Plot the acf and pacf of GM
par(mfrow = c(1,2))
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Plot the acf and pacf of GM
par(mfrow = c(1,2))
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Take the first-order difference of the logged time series
ford_diff1 <- diff(ford_ts_log, lag = 1)
gm_diff1 <- diff(gm_ts_log, lag = 1)
# Plot the first-difference time series
par(mfrow = c(2, 1))
plot(ford_diff1 , type = 'l',
xlab = "time", ylab = "first-order difference", main = "Ford Differenced Time Series")
plot(gm_diff1 , type = 'l',
xlab = "time", ylab = "first-order difference", main = "GM Differenced Time Series")
# Plot the acf and pacf of GM
par(mfrow = c(1,2))
acf(gm_ts, lag.max = 48)
pacf(gm_ts, lag.max = 48)
# Take the log of the time series
gm_ts_log <- log(gm_ts)
# Plot the logged time series
plot(Date_Short, gm_ts_log,
type = "l", xlab = "Date", ylab = "Monthly Sales", main = "General Motors Logged Time Series")
# Take the first-order difference of the logged time series
gm_diff1 <- diff(gm_ts_log, lag = 1)
# Plot the first-difference time series
plot(gm_diff1 , type = 'l',
xlab = "time", ylab = "first-order difference", main = "GM Differenced Time Series")
# Plot the ACF and PACF of the first-difference time series
par(mfrow = c(2,1))
acf(gm_diff1, lag.max = 48)
pacf(gm_diff1, lag.max = 48)
# Plot the ACF and PACF of the first-difference time series
par(mfrow = c(1, 2))
acf(gm_diff1, lag.max = 48)
pacf(gm_diff1, lag.max = 48)
# Take the difference at lag 12 of the time series
gm_diff2 <- diff(gm_diff1, lag = 12)
# Plot the first-difference time series
par(mfrow = c(2, 1))
plot(gm_diff2 , type = 'l', xlab = "time", ylab = "difference at lag 12",
main = "GM Differenced Time Series at lag 12")
# Take the difference at lag 12 of the time series
gm_diff2 <- diff(gm_diff1, lag = 12)
# Plot the first-difference time series
plot(gm_diff2 , type = 'l', xlab = "time", ylab = "difference at lag 12",
main = "GM Differenced Time Series at lag 12")
# Plot the ACF and PACF of the difference time series at lag = 12
par(mfrow = c(2,1))
acf(gm_diff2, lag.max = 48)
pacf(gm_diff2, lag.max = 48)
# Plot the ACF and PACF of the difference time series at lag = 12
par(mfrow = c(1,2))
acf(gm_diff2, lag.max = 48)
pacf(gm_diff2, lag.max = 48)
library(tseries)
# Perform the Augmented Dickey-Fuller test
test_1 <- adf.test(gm_diff2)
# Print results
print(test_1)
cat("p-value: ", test_1$p.value, "\n")
# Load the necessary packages
library(forecast)
library(ggplot2)
# Choosing the best model for GM Time Series
# Set values for d, D, and s
d <- 1
D <- 1
s <- 12
# Initialize variables to store minimum AIC and corresponding parameters
min_aic_gm <- Inf
best_params_gm <- c()
# Loop over values of p, q, P, and Q
for (p in 1:3) {
for (q in 1:3) {
for (P in 1:3) {
for (Q in 1:3) {
# Check if the sum of parameters is less than or equal to 10
if (p + d + q + P + D + Q <= 10) {
# Fit ARIMA model
model_gm <- try(arima(log(gm_ts), order=c(p-1, d, q-1),
seasonal=list(order=c(P-1, D, Q-1),period=s)), silent = TRUE)
# Check for errors in model fitting
if (class(model_gm) == "try-error") {
next
}
# Perform Ljung-Box test on residuals of fitted model
test <- Box.test(model_gm$residuals, lag=log(length(model_gm$residuals)))
# Calculate SSE of fitted model
sse <- sum(model_gm$residuals^2)
# Update minimum AIC and corresponding parameters if a better model is found
if (model_gm$aic < min_aic_gm) {
min_aic_gm <- model_gm$aic
best_params_gm <- c(p-1, d, q-1, P-1, D, Q-1)
}
# Print AIC, SSE, and p-value of fitted model
cat(p-1, d, q-1, P-1, D, Q-1, "AIC:", model_gm$aic, "SSE:", sse,
"p-value:", test$p.value, "\n")
}
}
}
}
}
# Print the best parameters and minimum AIC
cat("Best Parameters: p, d, q, P, D, Q =", best_params_gm, "\n")
cat("Minimum AIC =", min_aic_gm, "\n")
# We fit a SARIMA(0,1,2)(0,1,1) model to GM time series
gm.fit <- arima(gm_diff2, order = c(0, 1, 2),seasonal = list(order = c(0, 1, 1),period = 12)
,method = "ML")
print(gm.fit)
library(TSA)
residual_analysis <- function(model, standardized = TRUE) {
residuals <- if (standardized) rstandard(model) else residuals(model)
par(mfrow = c(3, 2))
plot(residuals, type = 'o', ylab = 'Standardized Residuals',
main = 'Time Series Plot of Standardized Residuals')
abline(h = 0)
hist(residuals, main = 'Histogram of Standardized Residuals')
qqnorm(residuals, main = 'Normal Q-Q Plot of Standardized Residuals')
qqline(residuals, col = 2)
acf(residuals, main = 'ACF of Standardized Residuals')
shapiro.test(residuals)
}
residual_analysis(model = gm.fit)
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
par(mfrow = c(2,1))
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
# Seasonal Decomposition Plot
decomposition <- decompose(gm_ts, type = "multiplicative")
# Check the length of the time series
length(gm_ts)
# Remove NA values, if any
gm_ts <- na.omit(gm_ts)
# Check the length again
length(gm_ts)
# Seasonal Decomposition Plot
decomposition <- decompose(gm_ts, type = "multiplicative")
# Check the length of the time series
length(gm_ts)
# Remove NA values, if any
gm_ts <- na.omit(gm_ts)
# Check the length again
length(gm_ts)
# Create a data frame with date and sales
df <- data.frame(Date = Date_Short, Sales = gm_ts)
# Extract month and year from the date
df$Month <- format(df$Date, "%m")
df$Year <- format(df$Date, "%Y")
# Create a boxplot to visualize seasonality
boxplot(Sales ~ Month, data = df, xlab = "Month", ylab = "Monthly Sales", main = "Seasonal Boxplot")
# Create a data frame with date and sales
df <- data.frame(Date = Date_Short, Sales = gm_ts)
# Extract month and year from the date
df$Month <- format(df$Date, "%m")
df$Year <- format(df$Date, "%Y")
# Create a boxplot to visualize seasonality
boxplot(Sales ~ Month, data = df, xlab = "Month", ylab = "Monthly Sales", main = "Seasonal Boxplot")
# Create a data frame with date and sales
df <- data.frame(Date = Date_Short, Sales = gm_ts)
# Extract month and year from the date
df$Month <- format(df$Date, "%m")
df$Year <- format(df$Date, "%Y")
# Create a boxplot to visualize seasonality
boxplot(Sales ~ Month, data = df, xlab = "Month", ylab = "Monthly Sales", main = "Seasonal Boxplot")
# Create the sales plot
gm <- ts(mydata$GM) # create a time series object for GM Monthly Sales
plot(mydata$Date, gm,
type = "o", xlab = "Date", ylab = "Monthly Sales", main = "Original General Motors Time Series")
library(TSA)
residual_analysis <- function(model, standardized = TRUE) {
residuals <- if (standardized) rstandard(model) else residuals(model)
par(mfrow = c(2, 2))
plot(residuals, type = 'o', ylab = 'Standardized Residuals',
main = 'Time Series Plot of Standardized Residuals')
abline(h = 0)
hist(residuals, main = 'Histogram of Standardized Residuals')
qqnorm(residuals, main = 'Normal Q-Q Plot of Standardized Residuals')
qqline(residuals, col = 2)
acf(residuals, main = 'ACF of Standardized Residuals')
shapiro.test(residuals)
}
residual_analysis(model = gm.fit)
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
xlab = "Time in Months"
ylab = "Original GM",
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
xlab = "Time in Months",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
# Predict log-transformed GM time series 24 time points ahead
n.ahead <- 24
x.forecast_2 <- predict(gm.fit, n.ahead = n.ahead)
# Plot the forecasts with prediction intervals
UU <- x.forecast_2$pred + 1.96 * x.forecast_2$se
LL <- x.forecast_2$pred - 1.96 * x.forecast_2$se
# Plot the log-transformed time series
plot((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead),
x.forecast_2$pred,
xlim = c(1, length(gm_diff2) + n.ahead),
ylim = c(min(gm_diff2, UU, LL), max(gm_diff2, UU, LL)),
col = "blue",
type = "l",
xlab = "Time in Months",
ylab = "Log-Transformed GM",
main = "Log-Transformed Time Series and Forecast")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), UU,
col = "green", lty = "dashed", type = "l")
lines((length(gm_diff2) + 1):(length(gm_diff2) + n.ahead), LL,
col = "green", lty = "dashed", type = "l")
lines(1:length(gm_diff2), gm_diff2, col = "red", type = "l")
# Plot the original time series
plot((length(gm) + 1):(length(gm) + n.ahead),
exp(x.forecast_2$pred),
xlim = c(1, length(gm) + n.ahead),
ylim = c(min(gm, exp(UU), exp(LL)), max(gm, exp(UU), exp(LL))),
col = "blue",
type = "l",
xlab = "Time in Months",
ylab = "Original GM",
main = "Original Time Series and Forecast")
lines((length(log(gm)) + 1):(length(log(gm)) + n.ahead), exp(UU), col = "blue", lty = "dashed")
lines((length(gm) + 1):(length(gm) + n.ahead), exp(LL), col = "blue", lty = "dashed")
lines(1:length(gm), gm, col = "red")
